#!/bin/bash

#
# check architecture
#
DEB_ARCH=
UNAME_M=$(uname -m)

if [ "$UNAME_M" = "x86_64" ]; then
    echo "running on x86 64bit platform"
    DEB_ARCH="amd64"
elif [ "$UNAME_M" = "i686" ]; then
    echo "ERROR: this script can only be run on 64bit system"
    return 1
else
    echo "ERROR: unsupported platform"
    return 1
fi


if [ ! -f /etc/debian_version ]; then
    echo "this script can only be run on Debian Jessie"
    return 1
fi

if [ "$(cat /etc/debian_version | grep -e ^8)" = "" ]; then
    echo "this script can only be run on Debian Jessie"
    return 1
fi

BARCELONA_ROOT=$(pwd)
echo "BARCELONA_ROOT is set to $BARCELONA_ROOT"

cd $BARCELONA_ROOT
cd ..
KERNEL_ROOT=$(pwd)
echo "KERNEL_ROOT is set to $KERNEL_ROOT"

DASH="------------------------------"

ARTIFACT_DIR=${BARCELONA_ROOT}/artifacts
CACHE_DIR=${BARCELONA_ROOT}/cache
PATCH_DIR=${BARCELONA_ROOT}/patches
SCRIPT_DIR=${BARCELONA_ROOT}/scripts
TEMPL_DIR=${BARCELONA_ROOT}/template

OUTPUT_DIR=${BARCELONA_ROOT}/output
STAGING_DIR=${BARCELONA_ROOT}/staging
TMP_DIR=${BARCELONA_ROOT}/tmp

#
# echo $1 in green color
#
highlight () {

    echo -e "\e[32m\e[1m${1}\e[0m"
}

banner () {
    echo ""
    highlight $DASH
    highlight "$1"
    highlight $DASH
}

build_kernel_package() {

    mkdir -p $STAGING_DIR

    rm -f $STAGING_DIR/linux-image-4.3.3.001+_001_amd64.deb
    rm -rf $STAGING_DIR/linux-image

    cd $KERNEL_ROOT
    cp $ARTIFACT_DIR/kernel_config .config

    make-kpkg --rootcmd=fakeroot --initrd --jobs=8 --append-to-version=.001 --revision=001 kernel_image kernel_headers

    if [ $? -ne 0 ]; then
        echo "ERROR: make-kpkg failed"
        return 1;
    fi

    cp $KERNEL_ROOT/../linux-image-4.3.3.001+_001_amd64.deb $STAGING_DIR

    cd $STAGING_DIR
    ar x linux-image-4.3.3.001+_001_amd64.deb data.tar.xz
    tar xf data.tar.xz
    echo "done"    

    cd $BARCELONA_ROOT
}

build_netboot_jessie () {

    local FSTATE=${TMP_DIR}/.fstate
    local FAKEROOT="fakeroot -i $FSTATE -s $FSTATE"

    rm -rf ${TMP_DIR}
    mkdir -p ${TMP_DIR}
    touch $FSTATE

    highlight "extract original debian initrd in netboot tarball"
    tar xOzf ${CACHE_DIR}/netboot.tar.gz ./debian-installer/${DEB_ARCH}/initrd.gz | zcat > ${TMP_DIR}/initrd.cpio
    echo "done"

    highlight "unpack cpio"
    mkdir -p ${TMP_DIR}/initrd
    cd ${TMP_DIR}/initrd
    $FAKEROOT sh -c "cpio -id < ${TMP_DIR}/initrd.cpio"
    $FAKEROOT ls -sail
    cd - &> /dev/null

    highlight "inject preseed.cfg file"
    $FAKEROOT cp ${ARTIFACT_DIR}/preseed.cfg $TMP_DIR/initrd
    echo "done"

#    highlight "inject kernel package"
#    $FAKEROOT cp $STAGING_DIR/linux-image-4.3.3.001+_001_amd64.deb $TMP_DIR/initrd
#    echo "done"

    highlight "inject statically linked busybox"
    $FAKEROOT cp $ARTIFACT_DIR/busybox-x86_64 $TMP_DIR/initrd/bin
    $FAKEROOT ln -s busybox-x86_64 $TMP_DIR/initrd/bin/gzip
    echo "done"

    highlight "inject statically linked mke2fs"
    $FAKEROOT cp $ARTIFACT_DIR/mke2fs $TMP_DIR/initrd/bin
    echo "done"

    highlight "inject pv"
    $FAKEROOT cp $ARTIFACT_DIR/pv $TMP_DIR/initrd/bin
    echo "done"

    highlight "inject tar/untar scripts"
    $FAKEROOT cp $ARTIFACT_DIR/tar_mmc $TMP_DIR/initrd/usr/bin
    $FAKEROOT cp $ARTIFACT_DIR/untar_mmc $TMP_DIR/initrd/usr/bin

    # cp modules
    highlight "inject 4.3.3+ kernel modules (and remove old ones)"
    $FAKEROOT cp -r $STAGING_DIR/lib $TMP_DIR/initrd
    $FAKEROOT rm -rf $TMP_DIR/initrd/lib/modules/3.16.0-4-amd64
    echo "done"

    highlight "inject autorun scripts"
    $FAKEROOT cp $ARTIFACT_DIR/autorun ${TMP_DIR}/initrd/bin
    $FAKEROOT chmod a+x ${TMP_DIR}/initrd/bin/autorun
    echo "done"

    # repack
    highlight "repack cpio archive"
    rm -f ${TMP_DIR}/initrd.cpio
    cd ${TMP_DIR}/initrd
    $FAKEROOT sh -c "find . | cpio -H newc -o > ${TMP_DIR}/initrd.cpio"
    cd - &> /dev/null

    highlight "zip initrd"
    cat ${TMP_DIR}/initrd.cpio | gzip > ${STAGING_DIR}/initrd.netboot.gz
    echo "repackaged netboot initrd (initrd.netboot.gz) is now available in ${STAGING_DIR}"
}

build_mininas_tarball () {

    # this is unsafe but suffice to our needs
    if [ -z "$1" ]; then
        echo "please provide svn revision."
        return 1;
    fi

    banner "build mininas tarball"

    rm -rf ${STAGING_DIR}/svn
    mkdir -p ${STAGING_DIR}/svn
    cd ${STAGING_DIR}/svn

    local PYTHON_SVN=https://192.168.5.40/svn/PythonWebProject/branches/release
    local SVN_NAME=jiangwei
    local SVN_PASSWORD=123456
    local PYTHON_SVN_VERSION=$1

    highlight "svn checkout version: $1"
    cd ${STAGING_DIR}/svn
    svn checkout $PYTHON_SVN --username $SVN_NAME --password $SVN_PASSWORD --quiet --no-auth-cache -r $PYTHON_SVN_VERSION
    echo "done"

    highlight "compress mininas apps into tarball"
    cd release
    tar czf aaa.tar.gz aaa

    mv aaa.tar.gz ${STAGING_DIR}
    cd ${BARCELONA_ROOT}

    echo "aaa tarball is in staging folder"
}

generate_output () {

    highlight "prepare dirs"
    rm -rf ${OUTPUT_DIR}
    mkdir -p ${OUTPUT_DIR}
    mkdir -p ${OUTPUT_DIR}/kbl
    mkdir -p ${OUTPUT_DIR}/boot
    mkdir -p ${OUTPUT_DIR}/install
    mkdir -p ${OUTPUT_DIR}/cefdk
    mkdir -p ${OUTPUT_DIR}/usb_flash/boot
    echo "done"

    highlight "output files"
    cp ${STAGING_DIR}/bzImage.kbl ${OUTPUT_DIR}/kbl/kbl
    cp ${STAGING_DIR}/boot/vmlinuz-4.3.3.001+ ${OUTPUT_DIR}/boot/bzImage
    cp ${STAGING_DIR}/initrd.netboot.gz ${OUTPUT_DIR}/boot/ramdisk
    cp ${ARTIFACT_DIR}/cmdline.usb ${OUTPUT_DIR}/boot/cmdline
    echo "$(git rev-parse --short HEAD)" > ${OUTPUT_DIR}/boot/git-short-hash
    cp ${STAGING_DIR}/*.deb ${OUTPUT_DIR}/install

    echo "cp overlay tree"
    cp -r ${BARCELONA_ROOT}/overlay/* ${OUTPUT_DIR}
    echo "done"

    echo "cp aaa.tar.gz"
    cp ${STAGING_DIR}/aaa.tar.gz ${OUTPUT_DIR}/install
    cp ${STAGING_DIR}/svn/release/updatedemo.py ${OUTPUT_DIR}/install
    cp ${ARTIFACT_DIR}/netatalk-3.1.8.tar.gz ${OUTPUT_DIR}/install
    echo "done"
    
    # echo "cp post_install & __post_install script"
    # cp ${ARTIFACT_DIR}/__post_install ${OUTPUT_DIR}
    # cp ${ARTIFACT_DIR}/post_install ${OUTPUT_DIR}
    # echo "done"

    cp ${STAGING_DIR}/bzImage.usbflash ${OUTPUT_DIR}/usb_flash/boot/bzImage
    echo "console=tty0 console=ttyS0,115200" > ${OUTPUT_DIR}/usb_flash/boot/cmdline
    echo "done"

    tree ${OUTPUT_DIR}
}

cd $BARCELONA_ROOT

return 0;
