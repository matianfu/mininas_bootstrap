#!/bin/bash
#
# GPL v2 license
# 
# Copyright winsuntech 2005
#
# wei.jiang@winsuntech.cn
# lewis.ma@winsuntech.cn
#


THUNDER_UID=990

DASH="----------------------------------------"

highlight () { 

     echo -e "\e[32m\e[1m${1}\e[0m"
}

banner () {

    echo ""
    highlight $DASH
    highlight "$1"
    highlight $DASH
}

#
# tool functions
#
overlay_file () {

    echo "cp /overlay$1 $1"
    cp /overlay$1 $1
}

install_service () {

    overlay_file /lib/systemd/system/$1.service
}

enable_service () {

    # systemctl enable works in chrooted environment
    # ln -s /etc/systemd/system/$1.service /lib/systemd/system/multi-user.target.wants/$1.service
    systemctl enable $1 
}

#
# prepare folders and links
#
prepare_layout() {

    #
    #   
    #
    export PATH=/usr/local/sbin:$PATH

    banner "prepare layout" 

    # mmcblk0p2 is already mounted at /mininas

    highlight "make folders on p2"
    mkdir -p /mininas/boot
    mkdir -p /mininas/ping
    mkdir -p /mininas/pong
    echo "done"

    # dont do this now, mysql installer will move the whole folder
    # mkdir -p /etc/mininas/data/mysql
  
    highlight "make mininas folder"  
    mkdir -p /etc/mininas
    cp -r /overlay/etc/mininas/chassis /etc/mininas
    mkdir -p /etc/mininas/templates
    # template files are deployed by individual functions
    echo "done"

    highlight "link mininas/data to ping"
    ln -s /mininas/ping /etc/mininas/data
    echo "done"

    highlight "make data/configs folder"
    mkdir -p /etc/mininas/data/configs
    mkdir -p /etc/mininas/data/disks
    mkdir -p /etc/mininas/data/volumes
    mkdir -p /etc/mininas/data/qqiot
    echo "done"
}

#
#
#
install_basic_files () {

    banner "install basic files"

    highlight "deploy fstab"
    overlay_file "/etc/fstab"
    echo "done"

    highlight "deploy volume.json"
    overlay_file "/etc/mininas/data/configs/volume.json"    
    echo "done"

    highlight "deploy mininas scripts"
    mkdir -p /usr/local/sbin
    cp /overlay/usr/local/sbin/mininas* /usr/local/sbin
    echo "done"
}

#
# apt source list, default, and proxy
#
config_apt () {

    banner "configure apt sources"

    overlay_file "/etc/apt/sources.list"
    overlay_file "/etc/apt/apt.conf.d/70debconf"
    
    highlight "updating apt, please wait..."
    apt-get update &> /dev/null
    echo "done"
}

#
# 
#
install_basic_commands () {

    banner "install basic commands"
    # members : members
    # getent : libc-bin (which is already installed)
    # id : coreutils (which is already installed)
    # vim, tree (for convenience)
    apt-get -y install members libc-bin coreutils vim tree initramfs-tools
    echo "done"
}

#
# install samba as early as possible since 
# all non-system users has samba account
#
install_samba () {

    banner "install samba"

    highlight "installing samba, please wait..."
    apt-get -y install samba &> /dev/null
    echo "done"
    
    highlight "put conf, json, and template files"
    overlay_file "/etc/samba/smb.conf"
    overlay_file "/etc/mininas/data/configs/samba.json"
    # mkdir -p /etc/mininas/templates/samba
    # overlay_file "/etc/mininas/templates/samba/global"
    # overlay_file "/etc/mininas/templates/samba/share"

    cp -r /overlay/etc/mininas/templates/samba /etc/mininas/templates
    echo "done"
}

#
#
#
create_users_and_groups () {

    banner "create users"

    # change UID_MAX to 2000", does NOT work
    # overlay_file "/etc/login.defs"

    # highlight "create admin as uid 1000"    
    # adduser --uid 1000 --gecos ",,," --disabled-password --disabled-login --no-create-home admin
    # echo "admin:123456" | chpasswd

    # create admin without home
    mininas_user_create admin 123456

    # /mnt/winsun is owned by admin:admin
    highlight "change /mnt/winsun to admin:admin 775"
    mkdir -p /mnt/winsun
    chown admin:admin /mnt/winsun
    chmod 775 /mnt/winsun

    # no matter if thunder installed, the uid is pre-allocated
    highlight "create thunder as uid $THUNDER_UID"
    adduser --uid $THUNDER_UID --gecos ",,," --disabled-password --disabled-login --no-create-home thunder
    echo "done"

    highlight "create smbshare and smbsharero groups"
    local SHAREGROUP=
    local SHAREGROUPRO=

    for num in $(seq -w 0 099); do

        SHAREGROUP=smbshare${num}
        SHAREGROUPRO=smbshare${num}ro

        addgroup --gid 10${num} $SHAREGROUP
        adduser admin $SHAREGROUP
        addgroup --gid 11${num} $SHAREGROUPRO
        adduser admin $SHAREGROUPRO

    done
    echo "done"
}


#
# install ssh, enable root login
#
install_ssh () {

    banner "install and configure ssh server"

    highlight "install openssh-server, please wait..."
    apt-get -y install openssh-server &> /dev/null
    echo "done"

    overlay_file "/etc/ssh/sshd_config"
    echo "done"
}

#
# install ssdp and unit file
#
install_ssdp () {

    banner "install ssdp service"

    local FILE="/usr/local/sbin/ssdp"

    overlay_file $FILE
    chmod a+x $FILE

    install_service ssdp
    enable_service ssdp

    echo "done"
}

#
# keys and leds service, also control fan speed 
#
install_keys_and_leds () {

    banner "install keys-and-leds service"

    local FILE="/usr/local/sbin/powerkey_chk.sh"    

    overlay_file $FILE
    chmod a+x $FILE

    install_service keys-and-leds
    enable_service keys-and-leds

    echo "done"
}

#
# updated (update daemon starter)
#
install_updated_starter () {

    banner "install updated-starter service"

    local FILE="/usr/local/sbin/updated_starter.sh"
    
    overlay_file $FILE
    chmod a+x $FILE

    install_service updated-starter
    enable_service updated-starter

    echo "done"
}

#
#
#
install_mysql () {

    banner "install mysql"

    local MYSQL_PASSWORD="wenshang"

    echo "mysql-server-5.5 mysql-server/root_password password ${MYSQL_PASSWORD}" | debconf-set-selections
    echo "mysql-server-5.5 mysql-server/root_password_again password ${MYSQL_PASSWORD}" | debconf-set-selections

    highlight "installing mysql-server-5.5, please wait..."
    apt-get -y install mysql-server-5.5 &> /dev/null
    echo "done"

    # /etc/init.d/mysql status
    # MySQL is stopped

    highlight "move mysql database location and update my.cnf"
    # move folder
    mv /var/lib/mysql /etc/mininas/data
    # this is important!
    chown mysql:mysql /etc/mininas/data/mysql

    overlay_file /etc/mysql/my.cnf
    echo "done"
}


install_proftpd () {

    banner "install proftpd"

    echo "proftpd-basic shared/proftpd/inetd_or_standalone select standalone" | debconf-set-selections

    highlight "installing proftpd, please wait..."
    apt-get -y install proftpd-basic &> /dev/null
    echo "done"
    
    highlight "overlay conf, json, and template files"
    overlay_file "/etc/proftpd/proftpd.conf"
    overlay_file "/etc/mininas/data/configs/proftpd.json"
    mkdir -p "/etc/mininas/templates/proftpd"
    overlay_file "/etc/mininas/templates/proftpd/default"
    overlay_file "/etc/mininas/templates/proftpd/expanded"
    echo "done"
}

install_deb_packages () {

    banner "install (dependent) debian packages"

    # libusb-1.0-0 is already installed in base
    # python-dev python-pip removed
    # python-dev is required if easy_install-ing psutil package
    # python-eyed3, python-apscheduler moved to easy_install
    highlight "installing packages, please wait..."
    apt-get -y --force-yes install gdisk util-linux expect curl libusb-1.0-0-dev libmysqlclient-dev python \
        python-django python-setuptools python-mysql.connector python-libtorrent python-mysqldb python-imaging \
        python-ntplib python-pexpect python-django-debug-toolbar python-psutil python-pyinotify &> /dev/null
    echo "done"

    highlight "picking btrfs-tools from sid, please wait..."
    apt-get -y -t sid install btrfs-tools &> /dev/null
    echo "done"
}

install_python_packages () {

    banner "install python packages"

    highlight "install eyeD3"
    easy_install eyeD3
    echo "done"

    highlight "install apscheduler"
    easy_install apscheduler
    echo "done"
}

install_mininas_app () {

    banner "install mininas"    

    highlight "untar files"
    mkdir -p /srv/mini
    tar xzf /overlay/install/aaa.tar.gz -C /srv/mini
    echo "done"

    highlight "initialize database"    
    # systemctl start mysql does NOT work in chrooted environment
    /etc/init.d/mysql start

    local MYSQL_ROOT="root"
    local MYSQL_PASSWORD="wenshang"

    mysql -u$MYSQL_ROOT -p$MYSQL_PASSWORD << EOF
        CREATE DATABASE mininas DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
EOF
    # 
    python /srv/mini/aaa/manage.py makemigrations
    python /srv/mini/aaa/manage.py migrate

    mysql -u$MYSQL_ROOT -p$MYSQL_PASSWORD << EOF
        use mininas;
        insert into mini_syssetting (uploadrootpath,samba,ftp) value ("/mnt/winsun/",0,0);
        insert into mini_user (UserName,Password,realname,email) value ("admin","123456","winsun","marketing@winsuntech.cn");
        insert into mini_ntpinfo (address,port,refreshtime) value ("202.112.10.36",123,3600);
EOF

    # stop mysql
    /etc/init.d/mysql stop
    echo "done"

    highlight "install mininas service"   
    install_service mininas
    enable_service mininas
    echo "done"

    highlight "install disk-watcher service, automount-disk service"
    install_service disk-watcher
    enable_service disk-watcher
    ech "done"

    highlight "install automount-disk service"
    install_service automount-disk 
    enable_service automount-disk
    echo "done"   
}

install_thunder() {

    banner "install thunder"

    highlight "install prerequisite packages, please wait..."
    apt-get -y install lib32z1 &> /dev/null
    echo "done"

    # thunder need write permission to mount point
    highlight "add thuner to admin group"
    adduser thunder admin

    highlight "copy files and set ownership/permissions"

    mkdir -p /opt
    cp -r /overlay/opt/xware /opt

    chown thunder:thunder /opt/xware
    chmod 755 /opt/xware

    chown thunder:thunder /opt/xware/EmbedThunderManager
    chmod 755 /opt/xware/EmbedThunderManager

    chown thunder:thunder /opt/xware/ETMDaemon
    chmod 755 /opt/xware/ETMDaemon

    chown thunder:thunder /opt/xware/portal
    chmod 755 /opt/xware/portal

    chown thunder:thunder /opt/xware/vod_httpserver
    chmod 755 /opt/xware/vod_httpserver

    echo "done"

    highlight "install thunder service"
    install_service thunder
    echo "done"
}

install_dlna () {
    
    banner "install minidlna"

    highlight "install minidlna and avahi daemon, please wait..."
    apt-get -y install minidlna avahi-daemon &> /dev/null
    echo "done"

    highlight "install conf, json, and template files"
    overlay_file "/etc/minidlna.conf"
    overlay_file "/etc/mininas/data/configs/minidlna.json"

    mkdir -p "/etc/mininas/templates/minidlna"
    overlay_file "/etc/mininas/templates/minidlna/default"
}

install_netatalk() {

    banner "install netatalk"
    echo "netatalk installer not implemented yet"
    # apt-get -y -t sid install netatalk

    # tar xzf /intall/netatalk-xxxx.tar.gz -C /

    # tar czf netatalk.... -C /xx/staging .

    # install_service netatalk

	tar xzf /overlay/install/netatalk-3.1.8.tar.gz -C /
	rm -rf /usr/local/var/netatalk
	ln -s /etc/mininas/data/netatalk /usr/local/var
    enable_service netatalk

    echo "done"
}
install_qqiot() {
	banner "install qqiot"
	highlight "install bin mininasqqiot"
	local FILE="/usr/local/sbin/mininasqqiot"
	overlay_file $FILE
	chmod a+x $FILE
	
	highlight "install lib"
	local FILE="/usr/local/lib/libnassdk.so"
	overlay_file $FILE
	local FILE="/usr/local/lib/libtxdevicesdk.so"
	overlay_file $FILE
	
	highlight "install service public key"
	local FILE="/etc/mininas/data/qqiot/170001154.pem"
	overlay_file $FILE
	chmod 400 $FILE
	
	highligt "install qqiot service "
	install_service qqiot
	enable_service qqiot
}
install_kernel() {

    banner "install kernel"

    highlight "install kernel package, please wait..."
    dpkg -i /overlay/install/linux-image-4.3.3.001\+_001_amd64.deb &> /dev/null
    echo "done"

    
    highlight "create boot links and cmdline"
    ln -s vmlinuz-4.3.3.001\+ /boot/bzImage;         
    ln -s initrd.img-4.3.3.001\+ /boot/ramdisk;      
    echo "console=tty0 console=ttyS0,115200 root=/dev/mmcblk0p1 rootwait" > /boot/cmdline
    echo "done"
}

do_cleanup() {

    banner "clean up"
    
    highlight "clean apt cache"
    apt-get clean
    echo "done"

    highlight "clean udev eth rules"
    rm -rf /etc/udev/rules.d/70-persistent-net.rules
    echo "done"

    highlight "clean apt proxy"
    rm -rf /etc/apt/apt.conf
    echo "done"

    # echo "clean manpages"
    # rm -rf 
}














